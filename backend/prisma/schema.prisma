// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(CARPENTER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  carpenter Carpenter?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Carpenter {
  id          String   @id @default(cuid())
  userId      String   @unique
  companyName String?
  phone       String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  clients  Client[]
  projects Project[]

  @@map("carpenters")
}

model Client {
  id          String   @id @default(cuid())
  carpenterId String
  name        String
  email       String?
  phone       String?
  address     String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  carpenter Carpenter @relation(fields: [carpenterId], references: [id], onDelete: Cascade)
  projects  Project[]

  @@map("clients")
}

model Project {
  id          String      @id @default(cuid())
  carpenterId String
  clientId    String
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  carpenter Carpenter @relation(fields: [carpenterId], references: [id], onDelete: Cascade)
  client    Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  furniture Furniture[]
  doors      Door[]

  @@map("projects")
}

model Furniture {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  description String?
  type        String?
  dimensions  String?
  material    String?
  color       String?
  quantity    Int      @default(1)
  price       Decimal? @db.Decimal(10, 2)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("furniture")
}

model Door {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  description String?
  type        String?
  dimensions  String?
  material    String?
  color       String?
  quantity    Int      @default(1)
  price       Decimal? @db.Decimal(10, 2)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("doors")
}

enum UserRole {
  ADMIN
  CARPENTER
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  ON_HOLD
}
